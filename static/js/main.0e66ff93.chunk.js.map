{"version":3,"sources":["components/Card.js","dragable.abstract.js","App.jsx","serviceWorker.js","index.jsx"],"names":["Card","_this","this","react_default","a","createElement","className","draggable","ref","props","item","handleDragStart","e","onDragg","classList","add","handleDragEnter","handleDragOver","handleDragLeave","handleDrop","handleDragEnd","setTimeout","remove","addEventListener","Component","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","cards","getCards","eventName","draggState","dragStartItem","dragStartItemIndex","indexOf","dragEnterItem","dragEnterItemIndex","console","log","newCardsOrder","slice","splice","Math","max","_this2","map","components_Card","key","React","decorate","observable","action","componentDidMount","observer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0e66ff93.chunk.js","sourcesContent":["import React from 'react';\nimport Draggable from \"../dragable.abstract\";\n\n class Card extends Draggable {\n    render() {\n\n        return (\n            <div className=\"Card\" draggable=\"true\" ref={ref => this.ref = ref}>\n                {this.props.item}\n            </div>\n        );\n    }\n}\n\nexport default Card;\n","import {Component} from 'react';\n\nexport default class Draggable extends Component {\n\n    componentDidMount() {\n        this.ref.addEventListener('dragstart', this.handleDragStart, false);\n        this.ref.addEventListener('dragenter', this.handleDragEnter, false)\n        this.ref.addEventListener('dragover', this.handleDragOver, false);\n        this.ref.addEventListener('dragleave', this.handleDragLeave, false);\n        this.ref.addEventListener('drop', this.handleDrop, false);\n        this.ref.addEventListener('dragend', this.handleDragEnd, false);\n    }\n\n    handleDragStart = (e) => {\n        this.props.onDragg('handleDragStart', this.props.item);\n        this.ref.classList.add('drag-start');\n    };\n    handleDragEnter = (e) => {\n        this.props.onDragg('handleDragEnter', this.props.item);\n    };\n    handleDragOver = (e) => {\n        this.props.onDragg('handleDragOver', this.props.item);\n    };\n    handleDragLeave = (e) => {\n        this.props.onDragg('handleDragLeave', this.props.item);\n    };\n    handleDrop = (e) => {\n        this.props.onDragg('handleDrop', this.props.item);\n    };\n    handleDragEnd = (e) => {\n        this.props.onDragg('handleDragEnd', this.props.item);\n        setTimeout(()=>this.ref.classList.remove('drag-start'),750);\n    };\n}\n","import React, {Component} from 'react';\nimport './App.css';\nimport Card from \"./components/Card\";\nimport {observable, action, decorate} from \"mobx\";\nimport {observer} from \"mobx-react\";\n\nclass App extends React.Component {\n\n    cards = [1,2,3,4,5,6,7,8,9];\n\n\n    constructor(props) {\n        super(props);\n        this.draggState = {};\n    }\n\n    getCards = () => {\n        return this.cards;\n    }\n\n    componentDidMount() {\n        console.log('componentDidMount')\n    }\n\n    onDragg = (eventName, item) => {\n        if (this.draggState[eventName] === item) {\n            console.log('no need update',item);\n            return;\n        }\n\n        this.draggState[eventName] = item;\n\n        if ('handleDragEnter' === eventName) {\n            const dragStartItem = this.draggState.handleDragStart;\n            const dragStartItemIndex = this.cards.indexOf(dragStartItem);\n            const dragEnterItem = this.draggState.handleDragEnter;\n            const dragEnterItemIndex = this.cards.indexOf(dragEnterItem);\n            console.log('over on me',dragStartItem,dragEnterItem);\n\n            if(dragStartItem===dragEnterItem){\n                return;\n            }\n\n            let newCardsOrder = this.cards.slice();\n            newCardsOrder.splice(dragStartItemIndex, 1);\n            newCardsOrder.splice(Math.max(0, dragEnterItemIndex), 0, dragStartItem);\n            this.cards = newCardsOrder;\n        }\n    };\n\n\n    render() {\n        console.log('app render');\n        const cards = this.cards.map(item => (<Card key={item} item={item} onDragg={this.onDragg}/>));\n\n        return (\n            <div className=\"App\">\n                {cards}\n            </div>\n        );\n    }\n}\n\ndecorate(App, {\n    cards: observable,\n    onDragg: action,\n    componentDidMount: action,\n});\n\nexport default observer(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}